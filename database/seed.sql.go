// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: seed.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listSeeds = `-- name: ListSeeds :many
SELECT seed_id, name, type FROM Seeds
`

func (q *Queries) ListSeeds(ctx context.Context) ([]Seed, error) {
	rows, err := q.db.Query(ctx, listSeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Seed
	for rows.Next() {
		var i Seed
		if err := rows.Scan(&i.SeedID, &i.Name, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newSeed = `-- name: NewSeed :one
INSERT INTO Seeds (seed_id, name, type)
VALUES ($1, $2, $3)
RETURNING seed_id, name, type
`

type NewSeedParams struct {
	SeedID pgtype.UUID
	Name   pgtype.Text
	Type   pgtype.Text
}

func (q *Queries) NewSeed(ctx context.Context, arg NewSeedParams) (Seed, error) {
	row := q.db.QueryRow(ctx, newSeed, arg.SeedID, arg.Name, arg.Type)
	var i Seed
	err := row.Scan(&i.SeedID, &i.Name, &i.Type)
	return i, err
}
